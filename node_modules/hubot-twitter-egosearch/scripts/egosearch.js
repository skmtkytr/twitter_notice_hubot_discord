// Generated by CoffeeScript 1.12.2
var Query, client, config, createQuery, dateformat, deleteQuery, getSearchUrl, getTweetUrl, loadQueriesFromBrain, loopSearching, maxTweets, persistQuery, queries, searchQueries, searchQueryAsync, twitter,
  hasProp = {}.hasOwnProperty;

twitter = require('twitter');

dateformat = require('dateformat');

queries = {};

config = {
  consumer_key: process.env.HUBOT_TWITTER_EGOSEARCH_CONSUMER_KEY,
  consumer_secret: process.env.HUBOT_TWITTER_EGOSEARCH_CONSUMER_SECRET,
  access_token_key: process.env.HUBOT_TWITTER_EGOSEARCH_ACCESS_TOKEN,
  access_token_secret: process.env.HUBOT_TWITTER_EGOSEARCH_ACCESS_TOKEN_SECRET
};

maxTweets = 5;

client = new twitter(config);

getSearchUrl = function(q) {
  return "https://twitter.com/search?q=" + (encodeURI(q));
};

getTweetUrl = function(user, id_str) {
  return "https://twitter.com/" + user.screen_name + "/status/" + id_str;
};

persistQuery = function(robot, id, query) {
  queries[id] = query;
  robot.brain.data.egosearch[id] = query.serialize();
  robot.brain.save();
  return robot.brain.setAutoSave(true);
};

createQuery = function(robot, msg, q, user) {
  var id, query;
  query = new Query(q, null, user);
  while ((id == null) || (queries[id] != null)) {
    id = Math.floor(Math.random() * 100000);
  }
  persistQuery(robot, id, query);
  return msg.send("[" + id + "] Now searching for " + q + " (" + (getSearchUrl(q)) + ")");
};

deleteQuery = function(robot, msg, id) {
  var q;
  if (queries[id] != null) {
    q = queries[id].q;
    delete queries[id];
    delete robot.brain.data.egosearch[id];
    return msg.send("Stopped searching for " + q);
  } else {
    return msg.send("Searcing job does not exist");
  }
};

loadQueriesFromBrain = function(robot) {
  var id, query, ref, results, serialized;
  ref = robot.brain.data.egosearch;
  results = [];
  for (id in ref) {
    if (!hasProp.call(ref, id)) continue;
    serialized = ref[id];
    query = new Query(serialized[0], serialized[1], serialized[2]);
    results.push(queries[id] = query);
  }
  return results;
};

loopSearching = function(robot) {
  return setInterval(function() {
    return searchQueries(robot);
  }, eval(process.env.HUBOT_TWITTER_EGOSEARCH_SEARCH_INTERVAL) || 1000 * 60);
};

searchQueries = function(robot) {
  var id, query, results;
  robot.logger.debug('searchLoopQuery');
  results = [];
  for (id in queries) {
    query = queries[id];
    results.push(searchQueryAsync(id, query).then(function(data) {
      var date, envelope, i, len, ref, results1, text, tweet;
      data.query.since_id = data.tweets.statuses[0].id_str;
      persistQuery(robot, data.id, data.query);
      envelope = {
        user: data.query.user,
        room: data.query.user.room
      };
      ref = data.tweets.statuses.reverse();
      results1 = [];
      for (i = 0, len = ref.length; i < len; i++) {
        tweet = ref[i];
        text = ("[" + data.id + "] " + data.query.q + "\n") + getTweetUrl(tweet.user, tweet.id_str);
        if (process.env.HUBOT_TWITTER_EGOSEARCH_SHOW_DETAIL) {
          date = dateformat(new Date(tweet.created_at), 'yyyy-mm-dd');
          text += "\n> " + tweet.text + "\n> \n> - " + tweet.user.name + " (@" + tweet.user.screen_name + ") " + date;
        }
        results1.push(robot.send(envelope, text));
      }
      return results1;
    })["catch"](function(error) {
      return robot.logger.error(error);
    }));
  }
  return results;
};

searchQueryAsync = function(id, query) {
  return new Promise(function(resolve, reject) {
    return client.get('search/tweets', {
      q: query.q,
      count: maxTweets,
      since_id: query.since_id
    }, function(error, tweets, response) {
      if (error) {
        return reject(error);
      } else if ((tweets.statuses == null) || tweets.statuses.length <= 0) {
        return reject('No results');
      } else {
        return resolve({
          id: id,
          query: query,
          tweets: tweets
        });
      }
    });
  });
};

Query = (function() {
  function Query(q, since_id, user) {
    var clonedUser, k, v;
    this.q = q;
    this.since_id = since_id;
    clonedUser = {};
    for (k in user) {
      v = user[k];
      clonedUser[k] = v;
    }
    this.user = clonedUser;
  }

  Query.prototype.serialize = function() {
    return [this.q, this.since_id, this.user];
  };

  return Query;

})();

module.exports = function(robot) {
  var base;
  (base = robot.brain.data).egosearch || (base.egosearch = {});
  robot.brain.on('loaded', (function(_this) {
    return function() {
      robot.logger.debug('loaded');
      robot.logger.debug(robot.brain.data.egosearch);
      loadQueriesFromBrain(robot);
      return loopSearching(robot);
    };
  })(this));
  robot.respond(/egosearch (?:add|new|start) (.+)/i, function(msg) {
    robot.logger.debug('add search');
    createQuery(robot, msg, msg.match[1], msg.message.user);
    return robot.logger.debug(robot.brain.data.egosearch);
  });
  robot.respond(/egosearch (?:rm|remove|del|delete|stop) (.+)/i, function(msg) {
    return deleteQuery(robot, msg, msg.match[1]);
  });
  return robot.respond(/egosearch (?:list|ls)/i, function(msg) {
    var id, query, text;
    text = '';
    for (id in queries) {
      query = queries[id];
      if (msg.message.user.room === query.user.room) {
        text += "[" + id + "] " + query.q + " (" + (getSearchUrl(query.q)) + ") @" + query.user.room + "\n";
      }
    }
    if (text.length > 0) {
      return msg.send(text);
    } else {
      return msg.send('Nothing here');
    }
  });
};
